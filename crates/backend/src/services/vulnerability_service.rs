use async_trait::async_trait;
use shared::types::{Severity, VulnerabilityStatus, ID};
use std::sync::Arc;
use tracing::{debug, info};

use crate::{
    models::Vulnerability,
    traits::{VulnerabilityRepository, VulnerabilityService},
    Result,
};

pub struct VulnerabilityServiceImpl {
    repository: Arc<dyn VulnerabilityRepository>,
}

impl VulnerabilityServiceImpl {
    pub fn new(repository: Arc<dyn VulnerabilityRepository>) -> Self {
        Self { repository }
    }
}

#[async_trait]
impl VulnerabilityService for VulnerabilityServiceImpl {
    async fn create_vulnerability(&self, vulnerability: &Vulnerability) -> Result<Vulnerability> {
        info!("Creating new vulnerability: {}", vulnerability.title);
        let result = self.repository.create_vulnerability(vulnerability).await?;
        debug!("Vulnerability created with ID: {}", result.id);
        Ok(result)
    }

    async fn get_vulnerability(&self, id: ID) -> Result<Vulnerability> {
        debug!("Getting vulnerability with ID: {}", id);
        self.repository.get_vulnerability(id).await
    }

    async fn update_vulnerability(&self, vulnerability: &Vulnerability) -> Result<Vulnerability> {
        debug!("Updating vulnerability with ID: {}", vulnerability.id);
        self.repository.update_vulnerability(vulnerability).await
    }

    async fn delete_vulnerability(&self, id: ID) -> Result<bool> {
        info!("Deleting vulnerability with ID: {}", id);
        self.repository.delete_vulnerability(id).await
    }

    async fn list_vulnerabilities(
        &self,
        asset_id: Option<ID>,
        port_id: Option<ID>,
        severity: Option<Severity>,
        status: Option<VulnerabilityStatus>,
        limit: usize,
        offset: usize,
    ) -> Result<Vec<Vulnerability>> {
        debug!(
            "Listing vulnerabilities with filters - asset_id: {:?}, port_id: {:?}, severity: {:?}, status: {:?}, limit: {}, offset: {}",
            asset_id, port_id, severity, status, limit, offset
        );
        self.repository
            .list_vulnerabilities(asset_id, port_id, severity, status, limit, offset)
            .await
    }

    async fn count_vulnerabilities(
        &self,
        asset_id: Option<ID>,
        port_id: Option<ID>,
        severity: Option<Severity>,
        status: Option<VulnerabilityStatus>,
    ) -> Result<usize> {
        debug!(
            "Counting vulnerabilities with filters - asset_id: {:?}, port_id: {:?}, severity: {:?}, status: {:?}",
            asset_id, port_id, severity, status
        );
        self.repository
            .count_vulnerabilities(asset_id, port_id, severity, status)
            .await
    }
}
