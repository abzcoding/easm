use serde::{Deserialize, Serialize};
use shared::types::{Severity, Timestamp, VulnerabilityStatus, ID};

/// Vulnerability model representing security weaknesses in assets
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Vulnerability {
    /// Unique identifier
    pub id: ID,

    /// Associated asset ID
    pub asset_id: ID,

    /// Associated port ID (optional)
    pub port_id: Option<ID>,

    /// Title of the vulnerability
    pub title: String,

    /// Detailed description
    pub description: Option<String>,

    /// Severity level
    pub severity: Severity,

    /// Current status
    pub status: VulnerabilityStatus,

    /// CVE identifier if applicable
    pub cve_id: Option<String>,

    /// CVSS score if available
    pub cvss_score: Option<f64>,

    /// Evidence data as JSON
    pub evidence: serde_json::Value,

    /// Recommended remediation steps
    pub remediation: Option<String>,

    /// When the vulnerability was first seen
    pub first_seen: Timestamp,

    /// When the vulnerability was last seen
    pub last_seen: Timestamp,

    /// When the vulnerability was resolved
    pub resolved_at: Option<Timestamp>,

    /// Creation timestamp
    pub created_at: Timestamp,

    /// Last updated timestamp
    pub updated_at: Timestamp,
}

impl Vulnerability {
    /// Create a new vulnerability with defaults
    pub fn new(
        asset_id: ID,
        port_id: Option<ID>,
        title: String,
        description: Option<String>,
        severity: Severity,
        cve_id: Option<String>,
        evidence: Option<serde_json::Value>,
        remediation: Option<String>,
    ) -> Self {
        use chrono::Utc;
        use uuid::Uuid;

        let now = Utc::now();

        Self {
            id: Uuid::new_v4(),
            asset_id,
            port_id,
            title,
            description,
            severity,
            status: VulnerabilityStatus::Open,
            cve_id,
            cvss_score: None,
            evidence: evidence.unwrap_or_else(|| serde_json::Value::Object(serde_json::Map::new())),
            remediation,
            first_seen: now,
            last_seen: now,
            resolved_at: None,
            created_at: now,
            updated_at: now,
        }
    }

    /// Calculate CVSS score based on severity
    pub fn calculate_cvss_score(&mut self) {
        self.cvss_score = Some(match self.severity {
            Severity::Critical => 9.0 + (rand::random::<f64>() * 1.0),
            Severity::High => 7.0 + (rand::random::<f64>() * 2.0),
            Severity::Medium => 4.0 + (rand::random::<f64>() * 3.0),
            Severity::Low => 1.0 + (rand::random::<f64>() * 3.0),
            Severity::Info => 0.1 + (rand::random::<f64>() * 0.9),
        });
    }
}
