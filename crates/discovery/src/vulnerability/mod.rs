use anyhow::Result;
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct DiscoveredVulnerability {
    pub target: String,              // The target where the vulnerability was found
    pub name: String,                // Name of the vulnerability
    pub severity: String,            // Severity level (critical, high, medium, low, info)
    pub description: Option<String>, // Description of the vulnerability
    pub template_id: String,         // Nuclei template ID
    pub tags: Vec<String>,           // Associated tags
    pub references: Vec<String>,     // Reference URLs
    pub cve_id: Option<String>,      // CVE ID if available
    pub cvss_score: Option<f32>,     // CVSS score if available
    pub matched_at: String,          // Where in the target the vulnerability was found
    pub detected_at: DateTime<Utc>,  // When the vulnerability was detected
    pub source: String,              // Source of the detection
}

impl DiscoveredVulnerability {
    pub fn new(
        target: String,
        name: String,
        severity: String,
        template_id: String,
        matched_at: String,
    ) -> Self {
        Self {
            target,
            name,
            severity,
            description: None,
            template_id,
            tags: Vec::new(),
            references: Vec::new(),
            cve_id: None,
            cvss_score: None,
            matched_at,
            detected_at: Utc::now(),
            source: format!("nuclei_scan_{}", uuid::Uuid::new_v4()),
        }
    }
}

// Nuclei runner module
pub mod nuclei;
