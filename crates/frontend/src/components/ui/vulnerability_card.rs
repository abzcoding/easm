use leptos::prelude::*;

#[derive(Clone, Debug)]
pub struct Vulnerability {
    pub id: String,
    pub title: String,
    pub description: String,
    pub severity: String,
    pub status: String,
    pub asset_name: String,
    pub discovery_date: String,
}

#[component]
pub fn VulnerabilityCard(
    #[prop(into)] vulnerability: Vulnerability,
    #[prop(into, optional)] on_click: Option<Callback<String>>,
) -> impl IntoView {
    let handle_click = move |_| {
        if let Some(callback) = on_click.as_ref() {
            callback.call(vulnerability.id.clone());
        }
    };

    let severity_class = move || {
        format!(
            "severity-badge severity-{}",
            vulnerability.severity.to_lowercase()
        )
    };
    let status_class = move || {
        format!(
            "status-badge status-{}",
            vulnerability.status.to_lowercase()
        )
    };

    view! {
        <div class="vulnerability-card" on:click={handle_click}>
            <div class="vulnerability-card-header">
                <span class={severity_class}>{&vulnerability.severity}</span>
                <span class={status_class}>{&vulnerability.status}</span>
            </div>
            <div class="vulnerability-card-body">
                <h3 class="vuln-title">{&vulnerability.title}</h3>
                <p class="vuln-description">{&vulnerability.description}</p>
                <div class="vulnerability-card-row">
                    <span class="label">"Asset:"</span>
                    <span class="value">{&vulnerability.asset_name}</span>
                </div>
                <div class="vulnerability-card-row">
                    <span class="label">"Discovered:"</span>
                    <span class="value">{&vulnerability.discovery_date}</span>
                </div>
            </div>
        </div>
    }
}
